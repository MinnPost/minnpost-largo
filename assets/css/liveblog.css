:root{--font-size-int:1.125;--scale0:1em;--scale-1:calc(var(--scale0)/var(--font-size-int));--scale-2:calc(var(--scale-1)/var(--font-size-int));--scale-3:calc(var(--scale-2)/var(--font-size-int));--scale1:calc(var(--scale0)*var(--font-size-int));--scale2:calc(var(--scale1)*var(--font-size-int));--scale3:calc(var(--scale2)*var(--font-size-int));--scale4:calc(var(--scale3)*var(--font-size-int))}:root{--line-height-int:0.95;--lh0:1.3;--lh-1:calc(var(--lh0)/var(--line-height-int));--lh-2:calc(var(--lh-1)/var(--line-height-int));--lh-3:calc(var(--lh-2)/var(--line-height-int));--lh1:calc(var(--lh0)*var(--line-height-int));--lh2:calc(var(--lh1)*var(--line-height-int));--lh3:calc(var(--lh2)*var(--line-height-int));--lh4:calc(var(--lh3)*var(--line-height-int))}@font-face{font-family:NimbusSanNovConD-Bol;src:url(assets/fonts/webfonts/28AEA4_0_0.eot);src:url(assets/fonts/webfonts/28AEA4_0_0.eot?#iefix) format("embedded-opentype"),url(assets/fonts/webfonts/28AEA4_0_0.woff) format("woff"),url(assets/fonts/webfonts/28AEA4_0_0.ttf) format("truetype")}.clearfix:after{clear:both;content:"";display:table}#wpcom-liveblog-container{background:#fff}.liveblog-entry{background:#fff;border-top:0;margin-bottom:20px}.liveblog-entry-aside a{cursor:text;font-family:helvetica,arial,sans-serif;text-decoration:none}.liveblog-entry-aside a span{font-size:11px}.liveblog-entry-aside a span:nth-of-type(2){display:none}.liveblog-meta-author .liveblog-meta-author-name{border-bottom:1px solid #cdcdd0;font-family:helvetica,arial,sans-serif;font-size:13px;line-height:normal;margin-left:0}.liveblog-meta-author .liveblog-meta-author-name:after{content:":";margin-left:.15em}.liveblog-entry-content *{word-break:normal}.liveblog-pagination .liveblog-pagination-pages:before{content:"Page ";margin-right:.3em}.liveblog-pagination:first-of-type{display:none}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
